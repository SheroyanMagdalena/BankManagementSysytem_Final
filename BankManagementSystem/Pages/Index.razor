@page "/"
@using BankManagementSystem.Data
@using BankManagementSystem
@using Microsoft.EntityFrameworkCore
@inject AppDbContext dbContext


<h1>Banking System</h1>

<!-- General Information Table -->
<h2>General Information</h2>
<table class="general-info-table">
    <tr>
        <th>Account ID</th>
        <td><input type="text" @bind="@accountId" /></td>
        <td><button class="btn1" @onclick="VerifyAccountId">Verify</button></td>
    </tr>
    @if (!string.IsNullOrEmpty(verificationMessage))
    {
        <tr>
            <td colspan="3" style="color: @verificationMessageColor">@verificationMessage</td>
        </tr>
    }
</table>

<div class="transaction-section">
    <!-- Deposit Table -->
    <div class="transaction-table">
        <h2>Deposit</h2>
        <table class="deposit-table">
            <tr>
                <th>Amount</th>
                <td><input type="number" @bind="@depositAmount" /></td>
            </tr>
            <tr>
                <td colspan="2">
                    <button class="btn1" @onclick="DepositFunds">Deposit</button>
                </td>
            </tr>
            @if (!string.IsNullOrEmpty(depositMessage))
            {
                <tr>
                    <td colspan="2" style="color: @depositMessageColor">@depositMessage</td>
                </tr>
            }
            @if (depositCompleted)
            {
                <tr>
                    <td colspan="2">New Balance: @newBalance</td>
                </tr>
            }
        </table>
    </div>

    <!-- Withdraw Table -->
    <div class="transaction-table">
        <h2>Withdraw</h2>
        <table class="withdraw-table">
            <tr>
                <th>Amount</th>
                <td><input type="number" @bind="@withdrawAmount" /></td>
            </tr>
            <tr>
                <td colspan="2">
                    <button class="btn1" @onclick="WithdrawFunds">Withdraw</button>
                </td>
            </tr>
            @if (!string.IsNullOrEmpty(withdrawMessage))
            {
                <tr>
                    <td colspan="2" style="color: @withdrawMessageColor">@withdrawMessage</td>
                </tr>
            }
            @if (withdrawCompleted)
            {
                <tr>
                    <td colspan="2">New Balance: @newBalance</td>
                </tr>
            }
        </table>
    </div>
</div>

<!-- Transfer Table -->
<table class="transfer-table">
    <tr>
        <h2>Transfer</h2>
        <th>Recipient Account ID</th>
        <td><input type="text" @bind="@recipientAccountId" /></td>
    </tr>
    <tr>
        <th>Amount</th>
        <td><input type="number" @bind="@transferAmount" /></td>
    </tr>
    <tr>
        <td colspan="2">
            <button class="btn1" @onclick="TransferFunds">Transfer</button>
        </td>
    </tr>
    @if (!string.IsNullOrEmpty(transferMessage))
    {
        <tr>
            <td colspan="2" style="color: @transferMessageColor">@transferMessage</td>
        </tr>
    }
    @if (transferCompleted)
    {
        <tr>
            <td colspan="2">New Balance: @newBalance</td>
        </tr>
    }
</table>

@code {
    private string accountId;
    private string recipientAccountId;
    private decimal depositAmount;
    private decimal withdrawAmount;
    private decimal transferAmount;

    private string verificationMessage = "";
    private string verificationMessageColor = "black";
    private string depositMessage = "";
    private string withdrawMessage = "";
    private string transferMessage = "";

    private string depositMessageColor = "black";
    private string withdrawMessageColor = "black";
    private string transferMessageColor = "black";

    private bool depositCompleted = false;
    private bool withdrawCompleted = false;
    private bool transferCompleted = false;

    private decimal newBalance = 0;

    private void VerifyAccountId()
    {
        if (string.IsNullOrWhiteSpace(accountId))
        {
            verificationMessage = "Account ID is required.";
            verificationMessageColor = "red";
            return;
        }

        var account = dbContext.Accounts.FirstOrDefault(a => a.AccountId == accountId);
        if (account != null)
        {
            verificationMessage = "Account ID is valid.";
            verificationMessageColor = "green";
        }
        else
        {
            verificationMessage = "Account ID not found.";
            verificationMessageColor = "red";
        }
    }

    private async Task DepositFunds()
    {
        if (string.IsNullOrWhiteSpace(accountId))
        {
            depositMessage = "Account ID is required.";
            depositMessageColor = "red";
            return;
        }

        var account = await dbContext.Accounts.FirstOrDefaultAsync(a => a.AccountId == accountId);
        if (account != null)
        {
            if (depositAmount <= 0)
            {
                depositMessage = "Deposit amount must be greater than zero.";
                depositMessageColor = "red";
                return;
            }

            account.Balance += depositAmount;
            await dbContext.SaveChangesAsync();
            depositMessage = "Deposit successful!";
            depositMessageColor = "green";
            newBalance = account.Balance;
            depositCompleted = true;
        }
        else
        {
            depositMessage = "Account not found!";
            depositMessageColor = "red";
        }
    }

    private async Task WithdrawFunds()
    {
        if (string.IsNullOrWhiteSpace(accountId))
        {
            withdrawMessage = "Account ID is required.";
            withdrawMessageColor = "red";
            return;
        }

        var account = await dbContext.Accounts.FirstOrDefaultAsync(a => a.AccountId == accountId);
        if (account != null)
        {
            if (withdrawAmount <= 0)
            {
                withdrawMessage = "Withdrawal amount must be greater than zero.";
                withdrawMessageColor = "red";
                return;
            }

            if (account.Balance < withdrawAmount)
            {
                withdrawMessage = "Insufficient balance!";
                withdrawMessageColor = "red";
                return;
            }

            account.Balance -= withdrawAmount;
            await dbContext.SaveChangesAsync();
            withdrawMessage = "Withdrawal successful!";
            withdrawMessageColor = "green";
            newBalance = account.Balance;
            withdrawCompleted = true;
        }
        else
        {
            withdrawMessage = "Account not found!";
            withdrawMessageColor = "red";
        }
    }


    private async Task TransferFunds()
    {
        if (string.IsNullOrWhiteSpace(accountId) || string.IsNullOrWhiteSpace(recipientAccountId))
        {
            transferMessage = "Both Account ID and Recipient Account ID are required.";
            transferMessageColor = "red";
            return;
        }

        using var transaction = await dbContext.Database.BeginTransactionAsync();

        try
        {
            var sourceAccount = await dbContext.Accounts.FirstOrDefaultAsync(a => a.AccountId == accountId);
            var recipientAccount = await dbContext.Accounts.FirstOrDefaultAsync(a => a.AccountId == recipientAccountId);

            if (sourceAccount == null || recipientAccount == null)
            {
                transferMessage = "One or both accounts not found!";
                transferMessageColor = "red";
                return;
            }

            if (transferAmount <= 0)
            {
                transferMessage = "Transfer amount must be greater than zero.";
                transferMessageColor = "red";
                return;
            }

            if (sourceAccount.Balance < transferAmount)
            {
                transferMessage = "Insufficient balance!";
                transferMessageColor = "red";
                return;
            }

            sourceAccount.Balance -= transferAmount;
            recipientAccount.Balance += transferAmount;

            await dbContext.SaveChangesAsync();
            await transaction.CommitAsync();

            transferMessage = "Transfer successful!";
            transferMessageColor = "green";
            newBalance = sourceAccount.Balance;
            transferCompleted = true;
        }
        catch (Exception ex)
        {
            await transaction.RollbackAsync();
            transferMessage = $"Transfer failed: {ex.Message}";
            transferMessageColor = "red";
        }
    }
}