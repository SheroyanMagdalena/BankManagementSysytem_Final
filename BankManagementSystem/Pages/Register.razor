@page "/register"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

@inject RegisterService RegisterService

<div class="register-container">
    <EditForm Model="@registerModel" OnValidSubmit="@Register1" class="register-form">
        <h1>Register</h1>
        <div class="form-group">
            <label for="accountType">Account Type:</label>
            <select id="accountType" @bind="@registerModel.AccountType" class="form-control">
                <option value="Debit">Debit</option>
                <option value="Credit">Credit</option>
                <option value="Saving">Saving</option>
            </select>
            <ValidationMessage For="@(() => registerModel.AccountType)" />
        </div>
        <div class="form-group">
            <label for="name">Name:</label>
            <InputText id="name" @bind-Value="@registerModel.Name" class="form-control" />
            <ValidationMessage For="@(() => registerModel.Name)" />
        </div>
        <div class="form-group">
            <label for="surname">Surname:</label>
            <InputText id="surname" @bind-Value="@registerModel.Surname" class="form-control" />
            <ValidationMessage For="@(() => registerModel.Surname)" />
        </div>

        <div class="form-group">
            <label for="age">Age:</label>
            <InputNumber id="age" @bind-Value="@registerModel.Age" class="form-control" />
            <ValidationMessage For="@(() => registerModel.Age)" />
        </div>

        <div class="form-group">
            <label for="dateOfBirth">Date of Birth:</label>
            <InputDate id="dateOfBirth" @bind-Value="@registerModel.DateOfBirth" class="form-control" />
            <ValidationMessage For="@(() => registerModel.DateOfBirth)" />
        </div>

        <div class="form-group">
            <label for="occupation">Occupation:</label>
            <InputText id="occupation" @bind-Value="@registerModel.Occupation" class="form-control" />
            <ValidationMessage For="@(() => registerModel.Occupation)" />
        </div>

        <div class="form-group">
            <label for="balance">Balance:</label>
            <InputNumber id="balance" @bind-Value="@registerModel.Balance" class="form-control" />
            <ValidationMessage For="@(() => registerModel.Balance)" />
        </div>
        <button type="submit" class="btn btn-primary">Register</button>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">
                @errorMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(accountId))
        {
            <div class="form-group">
                <label for="accountId">Generated Account ID:</label>
                <span id="accountId">@accountId</span>
            </div>
        }
    </EditForm>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string errorMessage;
    private string accountId;

    private async Task Register1()
    {
        try
        {
            accountId = await RegisterService.RegisterUser(registerModel);

            errorMessage = ""; 
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
